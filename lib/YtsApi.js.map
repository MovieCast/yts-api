{"version":3,"file":"YtsApi.js","sourceRoot":"","sources":["../src/YtsApi.ts"],"names":[],"mappings":";;AAAA,2BAA2B;AAe3B,MAAa,MAAM;IAGf,YAAY,EACR,MAAM,GAAG,gBAAgB,EACzB,OAAO,GAAG,CAAC,MACI,EAAE;QACjB,IAAI,CAAC,OAAO,GAAG,GAAG,MAAM,SAAS,OAAO,EAAE,CAAC;IAC/C,CAAC;IAED;;;OAGG;IACI,KAAK,CAAC,YAAY,CAAC,EACtB,KAAK,GAAG,EAAE,EACV,IAAI,GAAG,CAAC,EACR,OAAO,GAAG,KAAK,EACf,aAAa,GAAG,CAAC,EACjB,SAAS,EACT,KAAK,EACL,MAAM,GAAG,YAAY,EACrB,OAAO,GAAG,MAAM,EAChB,aAAa,GAAG,KAAK,MACJ,EAAE;QACnB,IAAI,KAAK,GAAG,CAAC,IAAI,KAAK,GAAG,EAAE,EAAE;YACzB,MAAM,IAAI,KAAK,CAAC,GAAG,KAAK,4EAA4E,CAAC,CAAC;SACzG;QACD,IAAI,aAAa,GAAG,CAAC,IAAI,aAAa,GAAG,CAAC,EAAE;YACxC,MAAM,IAAI,KAAK,CAAC;kBACV,aAAa,mFAAmF,CAAC,CAAC;SAC3G;QACD,IAAI,OAAO,aAAa,KAAK,SAAS,EAAE;YACpC,MAAM,IAAI,KAAK,CAAC,GAAG,aAAa,+DAA+D,CAAC,CAAC;SACpG;QAED,OAAO,IAAI,CAAC,GAAG,CAAoB,mBAAmB,EAAE;YACpD,KAAK;YACL,IAAI;YACJ,KAAK;YACL,OAAO;YACP,cAAc,EAAE,aAAa;YAC7B,UAAU,EAAE,SAAS;YACrB,QAAQ,EAAE,MAAM;YAChB,QAAQ,EAAE,OAAO;YACjB,eAAe,EAAE,aAAa;SACjC,CAAC,CAAC;IACP,CAAC;IAED;;;;OAIG;IACI,KAAK,CAAC,eAAe,CAAC,EAAU,EAAE,EACrC,QAAQ,GAAG,KAAK,EAChB,UAAU,GAAG,KAAK,MACF,EAAE;QAClB,cAAc;QACd,IAAI,CAAC,EAAE,IAAI,OAAO,EAAE,KAAK,QAAQ,EAAE;YAC/B,MAAM,IAAI,KAAK,CAAC,GAAG,EAAE,mDAAmD,CAAC,CAAC;SAC7E;QACD,IAAI,OAAO,UAAU,KAAK,SAAS,EAAE;YACjC,MAAM,IAAI,KAAK,CAAC,GAAG,UAAU,4DAA4D,CAAC,CAAC;SAC9F;QACD,IAAI,OAAO,QAAQ,KAAK,SAAS,EAAE;YAC/B,MAAM,IAAI,KAAK,CAAC,GAAG,QAAQ,0DAA0D,CAAC,CAAC;SAC1F;QAED,OAAO,IAAI,CAAC,GAAG,CAAgB,qBAAqB,EAAE;YAClD,QAAQ,EAAE,EAAE;YACZ,SAAS,EAAE,QAAQ;YACnB,WAAW,EAAE,UAAU;SAC1B,CAAC,CAAC;IACP,CAAC;IAED;;;;OAIG;IACK,KAAK,CAAC,GAAG,CAAI,QAAgB,EAAE,KAAU;QAC7C,MAAM,GAAG,GAAG,MAAM,GAAG,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,OAAO,GAAG,QAAQ,EAAE,EAAE;YACpD,KAAK;YACL,IAAI,EAAE,IAAI;SACb,CAAC,CAAC;QAEH,OAAO,GAAG,CAAC,IAAI,CAAC;IACpB,CAAC;CACJ;AAzFD,wBAyFC","sourcesContent":["import * as got from \"got\";\r\n\r\nimport {\r\n    IYtsMovieData,\r\n    IYtsMovieListData,\r\n    IYtsMovieQuery,\r\n    IYtsMoviesQuery,\r\n    IYtsResponse,\r\n} from \"./interfaces\";\r\n\r\nexport interface IYtsApiConfig {\r\n    domain?: string;\r\n    version?: number;\r\n}\r\n\r\nexport class YtsApi {\r\n    private baseUrl: string;\r\n\r\n    constructor({\r\n        domain = \"https://yts.am\",\r\n        version = 2,\r\n    }: IYtsApiConfig = {}) {\r\n        this.baseUrl = `${domain}/api/v${version}`;\r\n    }\r\n\r\n    /**\r\n     * Gets a list of movies from yts\r\n     * @param query The query\r\n     */\r\n    public async getMovieList({\r\n        limit = 20,\r\n        page = 1,\r\n        quality = \"All\",\r\n        minimumRating = 0,\r\n        queryTerm,\r\n        genre,\r\n        sortBy = \"date_added\",\r\n        orderBy = \"desc\",\r\n        withRtRatings = false,\r\n    }: IYtsMoviesQuery = {}) {\r\n        if (limit < 1 || limit > 50) {\r\n            throw new Error(`${limit} is not a valid value for limit, expected a number in the range of 1 - 50!`);\r\n        }\r\n        if (minimumRating < 0 || minimumRating > 9) {\r\n            throw new Error(`\r\n                ${minimumRating} is not a valid value for minimumRating, expected a number in the range of 0 - 9!`);\r\n        }\r\n        if (typeof withRtRatings !== \"boolean\") {\r\n            throw new Error(`${withRtRatings} is not a valid value for withRtRatings, expected an boolean!`);\r\n        }\r\n\r\n        return this.get<IYtsMovieListData>(\"/list_movies.json\", {\r\n            limit,\r\n            page,\r\n            genre,\r\n            quality,\r\n            minimum_rating: minimumRating,\r\n            query_term: queryTerm,\r\n            sorty_by: sortBy,\r\n            order_by: orderBy,\r\n            with_rt_ratings: withRtRatings,\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Gets a movie from yts\r\n     * @param {Number} id - The movie id\r\n     * @param options - Extra options\r\n     */\r\n    public async getMovieDetails(id: number, {\r\n        withCast = false,\r\n        withImages = false,\r\n    }: IYtsMovieQuery = {}) {\r\n        // Checkssssss\r\n        if (!id || typeof id !== \"number\") {\r\n            throw new Error(`${id} is not a valid value for id, expected an number!`);\r\n        }\r\n        if (typeof withImages !== \"boolean\") {\r\n            throw new Error(`${withImages} is not a valid value for withImages, expected an boolean!`);\r\n        }\r\n        if (typeof withCast !== \"boolean\") {\r\n            throw new Error(`${withCast} is not a valid value for withCast, expected an boolean!`);\r\n        }\r\n\r\n        return this.get<IYtsMovieData>(\"/movie_details.json\", {\r\n            movie_id: id,\r\n            with_cast: withCast,\r\n            with_images: withImages,\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Make a get request to the given endpoint\r\n     * @param endpoint The endpoint\r\n     * @param query The query parameters\r\n     */\r\n    private async get<T>(endpoint: string, query: any): Promise<IYtsResponse<T>> {\r\n        const res = await got.get(`${this.baseUrl}${endpoint}`, {\r\n            query,\r\n            json: true,\r\n        });\r\n\r\n        return res.body;\r\n    }\r\n}\r\n"]}